{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = 'idle';\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.hasStarted = false;\n    }\n    startToRestart() {\n        if (!this.hasStarted) {\n            const btn = document.querySelector('.start');\n            btn.textContent = 'Restart';\n            btn.classList.remove('start');\n            btn.classList.add('restart');\n            this.hasStarted = true;\n        }\n    }\n    updateScore() {\n        const scoreElement = document.querySelector('.game-score');\n        if (scoreElement) scoreElement.textContent = this.score;\n    }\n    handleKeyDown(e) {\n        if (this.status === 'lose' || this.status === 'win') return;\n        if (e.code === 'ArrowLeft') this.moveLeft();\n        if (e.code === 'ArrowRight') this.moveRight();\n        if (e.code === 'ArrowUp') this.moveUp();\n        if (e.code === 'ArrowDown') this.moveDown();\n    }\n    setupControls() {\n        if (this.controlsSet) return;\n        document.addEventListener('keydown', this.handleKeyDown);\n        this.controlsSet = true;\n    }\n    addRandomTile() {\n        const listOfEmptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) listOfEmptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (listOfEmptyCells.length > 0) {\n            const randomEmptyCell = Math.floor(Math.random() * listOfEmptyCells.length);\n            const randomEmptyCellValue = Math.random() < 0.9 ? 2 : 4;\n            this.board[listOfEmptyCells[randomEmptyCell][0]][listOfEmptyCells[randomEmptyCell][1]] = randomEmptyCellValue;\n        }\n    }\n    moveLeft() {\n        const prevBoard = JSON.stringify(this.board);\n        for(let row = 0; row < this.board.length; row++){\n            const newRow = [];\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== 0) newRow.push(this.board[row][col]);\n            for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow.splice(i + 1, 1);\n                this.score += newRow[i];\n                newRow.push(0);\n                i++;\n            }\n            while(newRow.length < this.board[row].length)newRow.push(0);\n            this.board[row] = newRow;\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (prevBoard !== newBoard) this.addRandomTile();\n        this.getStatus();\n        this.render();\n        this.updateScore();\n        this.startToRestart();\n    }\n    moveRight() {\n        const prevBoard = JSON.stringify(this.board);\n        for(let row = 0; row < this.board.length; row++){\n            const newRow = this.board[row].filter((val)=>val !== 0).reverse();\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1);\n            }\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow.reverse();\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (prevBoard !== newBoard) this.addRandomTile();\n        this.getStatus();\n        this.render();\n        this.updateScore();\n        this.startToRestart();\n    }\n    moveUp() {\n        const prevBoard = JSON.stringify(this.board);\n        for(let col = 0; col < this.board[0].length; col++){\n            const newCol = [];\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                newCol.splice(i + 1, 1);\n                this.score += newCol[i];\n                newCol.push(0);\n                i++;\n            }\n            while(newCol.length < this.board.length)newCol.push(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = newCol[row];\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (prevBoard !== newBoard) this.addRandomTile();\n        this.getStatus();\n        this.render();\n        this.updateScore();\n        this.startToRestart();\n    }\n    moveDown() {\n        const prevBoard = JSON.stringify(this.board);\n        for(let col = 0; col < this.board[0].length; col++){\n            const newCol = [];\n            for(let row = this.board.length - 1; row >= 0; row--)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                newCol.splice(i + 1, 1);\n                this.score += newCol[i];\n                newCol.push(0);\n                i++;\n            }\n            while(newCol.length < this.board.length)newCol.push(0);\n            for(let row = this.board.length - 1; row >= 0; row--)this.board[row][col] = newCol[this.board.length - 1 - row];\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (prevBoard !== newBoard) this.addRandomTile();\n        this.getStatus();\n        this.render();\n        this.updateScore();\n        this.startToRestart();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        this.render();\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] === 2048) {\n                this.status = 'win';\n                return this.status;\n            } else if (this.board[row][col] === 0) {\n                this.status = 'playing';\n                return this.status;\n            }\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n                this.status = 'playing';\n                return this.status;\n            }\n        }\n        this.status = 'lose';\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.status = 'playing';\n        const listOfEmptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) listOfEmptyCells.push([\n                row,\n                col\n            ]);\n        }\n        let randomEmptyCellOne, randomEmptyCellTwo;\n        do {\n            randomEmptyCellOne = Math.floor(Math.random() * listOfEmptyCells.length);\n            randomEmptyCellTwo = Math.floor(Math.random() * listOfEmptyCells.length);\n        }while (randomEmptyCellOne === randomEmptyCellTwo);\n        const firstValue = Math.random() < 0.9 ? 2 : 4;\n        this.board[listOfEmptyCells[randomEmptyCellOne][0]][listOfEmptyCells[randomEmptyCellOne][1]] = firstValue;\n        const secondValue = Math.random() < 0.9 ? 2 : 4;\n        this.board[listOfEmptyCells[randomEmptyCellTwo][0]][listOfEmptyCells[randomEmptyCellTwo][1]] = secondValue;\n        this.setupControls();\n        this.render();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.updateScore();\n        this.start();\n    }\n    // Add your own methods here\n    renderCell(cellElement, value) {\n        cellElement.className = 'field-cell';\n        if (value !== 0) {\n            cellElement.classList.add(`field-cell--${value}`);\n            cellElement.textContent = value;\n        } else cellElement.textContent = '';\n    }\n    render() {\n        const cells = document.querySelectorAll('.field-cell');\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board.length; col++){\n            const index = row * this.board.length + col;\n            const value = this.board[row][col];\n            cells[index].textContent = value === 0 ? '' : value;\n        }\n        const scoreElement = document.querySelector('.score');\n        if (scoreElement) scoreElement.textContent = this.score;\n        const fieldCells = document.querySelectorAll('.field-cell');\n        fieldCells.forEach((cellElement, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = this.board[row][col];\n            this.renderCell(cellElement, value);\n        });\n        const winMessage = document.querySelector('.message-win');\n        const loseMessage = document.querySelector('.message-lose');\n        const startMessage = document.querySelector('.message-start');\n        if (winMessage) {\n            if (this.status === 'win') winMessage.classList.remove('hidden');\n            else winMessage.classList.add('hidden');\n        }\n        if (loseMessage) {\n            if (this.status === 'lose') loseMessage.classList.remove('hidden');\n            else loseMessage.classList.add('hidden');\n        }\n        if (startMessage) {\n            if (this.status !== 'idle') startMessage.classList.add('hidden');\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n'use strict';\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if (!$09e991522ca7e64e$var$game.hasStarted) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n});\n\n\n//# sourceMappingURL=js_2048-game.c4223c8c.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  if (!game.hasStarted) {\n    game.start();\n  } else {\n    game.restart();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.hasStarted = false;\n  }\n\n  startToRestart() {\n    if (!this.hasStarted) {\n      const btn = document.querySelector('.start');\n\n      btn.textContent = 'Restart';\n      btn.classList.remove('start');\n      btn.classList.add('restart');\n      this.hasStarted = true;\n    }\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  handleKeyDown(e) {\n    if (this.status === 'lose' || this.status === 'win') {\n      return;\n    }\n\n    if (e.code === 'ArrowLeft') {\n      this.moveLeft();\n    }\n\n    if (e.code === 'ArrowRight') {\n      this.moveRight();\n    }\n\n    if (e.code === 'ArrowUp') {\n      this.moveUp();\n    }\n\n    if (e.code === 'ArrowDown') {\n      this.moveDown();\n    }\n  }\n\n  setupControls() {\n    if (this.controlsSet) {\n      return;\n    }\n\n    document.addEventListener('keydown', this.handleKeyDown);\n    this.controlsSet = true;\n  }\n\n  addRandomTile() {\n    const listOfEmptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          listOfEmptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (listOfEmptyCells.length > 0) {\n      const randomEmptyCell = Math.floor(\n        Math.random() * listOfEmptyCells.length,\n      );\n      const randomEmptyCellValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[listOfEmptyCells[randomEmptyCell][0]][\n        listOfEmptyCells[randomEmptyCell][1]\n      ] = randomEmptyCellValue;\n    }\n  }\n\n  moveLeft() {\n    const prevBoard = JSON.stringify(this.board);\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = [];\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== 0) {\n          newRow.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow.splice(i + 1, 1);\n          this.score += newRow[i];\n          newRow.push(0);\n          i++;\n        }\n      }\n\n      while (newRow.length < this.board[row].length) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow;\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (prevBoard !== newBoard) {\n      this.addRandomTile();\n    }\n    this.getStatus();\n    this.render();\n    this.updateScore();\n    this.startToRestart();\n  }\n  moveRight() {\n    const prevBoard = JSON.stringify(this.board);\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.board[row].filter((val) => val !== 0).reverse();\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow.reverse();\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (prevBoard !== newBoard) {\n      this.addRandomTile();\n    }\n\n    this.getStatus();\n    this.render();\n    this.updateScore();\n    this.startToRestart();\n  }\n\n  moveUp() {\n    const prevBoard = JSON.stringify(this.board);\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          newCol.splice(i + 1, 1);\n          this.score += newCol[i];\n          newCol.push(0);\n          i++;\n        }\n      }\n\n      while (newCol.length < this.board.length) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (prevBoard !== newBoard) {\n      this.addRandomTile();\n    }\n    this.getStatus();\n    this.render();\n    this.updateScore();\n    this.startToRestart();\n  }\n\n  moveDown() {\n    const prevBoard = JSON.stringify(this.board);\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const newCol = [];\n\n      for (let row = this.board.length - 1; row >= 0; row--) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          newCol.splice(i + 1, 1);\n          this.score += newCol[i];\n          newCol.push(0);\n          i++;\n        }\n      }\n\n      while (newCol.length < this.board.length) {\n        newCol.push(0);\n      }\n\n      for (let row = this.board.length - 1; row >= 0; row--) {\n        this.board[row][col] = newCol[this.board.length - 1 - row];\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (prevBoard !== newBoard) {\n      this.addRandomTile();\n    }\n    this.getStatus();\n    this.render();\n    this.updateScore();\n    this.startToRestart();\n  }\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    this.render();\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        } else if (this.board[row][col] === 0) {\n          this.status = 'playing';\n\n          return this.status;\n        }\n\n        if (\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          this.status = 'playing';\n\n          return this.status;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.status = 'playing';\n\n    const listOfEmptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          listOfEmptyCells.push([row, col]);\n        }\n      }\n    }\n\n    let randomEmptyCellOne, randomEmptyCellTwo;\n\n    do {\n      randomEmptyCellOne = Math.floor(Math.random() * listOfEmptyCells.length);\n      randomEmptyCellTwo = Math.floor(Math.random() * listOfEmptyCells.length);\n    } while (randomEmptyCellOne === randomEmptyCellTwo);\n\n    const firstValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[listOfEmptyCells[randomEmptyCellOne][0]][\n      listOfEmptyCells[randomEmptyCellOne][1]\n    ] = firstValue;\n\n    const secondValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[listOfEmptyCells[randomEmptyCellTwo][0]][\n      listOfEmptyCells[randomEmptyCellTwo][1]\n    ] = secondValue;\n\n    this.setupControls();\n    this.render();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.updateScore();\n    this.start();\n  }\n\n  // Add your own methods here\n  renderCell(cellElement, value) {\n    cellElement.className = 'field-cell';\n\n    if (value !== 0) {\n      cellElement.classList.add(`field-cell--${value}`);\n      cellElement.textContent = value;\n    } else {\n      cellElement.textContent = '';\n    }\n  }\n\n  render() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board.length; col++) {\n        const index = row * this.board.length + col;\n        const value = this.board[row][col];\n\n        cells[index].textContent = value === 0 ? '' : value;\n      }\n    }\n\n    const scoreElement = document.querySelector('.score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n\n    const fieldCells = document.querySelectorAll('.field-cell');\n\n    fieldCells.forEach((cellElement, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.board[row][col];\n\n      this.renderCell(cellElement, value);\n    });\n\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n    const startMessage = document.querySelector('.message-start');\n\n    if (winMessage) {\n      if (this.status === 'win') {\n        winMessage.classList.remove('hidden');\n      } else {\n        winMessage.classList.add('hidden');\n      }\n    }\n\n    if (loseMessage) {\n      if (this.status === 'lose') {\n        loseMessage.classList.remove('hidden');\n      } else {\n        loseMessage.classList.add('hidden');\n      }\n    }\n\n    if (startMessage) {\n      if (this.status !== 'idle') {\n        startMessage.classList.add('hidden');\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$09e991522ca7e64e$var$game","initialState","console","log","board","score","status","handleKeyDown","bind","hasStarted","startToRestart","btn","document","querySelector","textContent","classList","remove","add","updateScore","scoreElement","e","code","moveLeft","moveRight","moveUp","moveDown","setupControls","controlsSet","addEventListener","addRandomTile","listOfEmptyCells","row","length","col","push","randomEmptyCell","Math","floor","random","randomEmptyCellValue","prevBoard","JSON","stringify","newRow","i","splice","getStatus","render","filter","val","reverse","newCol","getScore","getState","start","randomEmptyCellOne","randomEmptyCellTwo","firstValue","secondValue","restart","renderCell","cellElement","value","className","cells","querySelectorAll","index","fieldCells","forEach","winMessage","loseMessage","startMessage","__esModule","default","$09e991522ca7e64e$var$startButton"],"version":3,"file":"js_2048-game.c4223c8c.js.map"}